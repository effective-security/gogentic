package chatmodel

import (
	"encoding/json"

	"github.com/effective-security/gogentic/llmutils"
	"github.com/invopop/jsonschema"
	"github.com/pkg/errors"
)

// ContentProvider is an interface for providing content from a message.
type ContentProvider interface {
	// GetContent gets the content of the message
	GetContent() string
}

// InputParser is an interface for parsing input strings into structured data.
type InputParser interface {
	// ParseInput parses the input string and populates the struct fields.
	ParseInput(input string) error
}

// MCPInputRequest represents the MCP input from the user to the AI agent.
type MCPInputRequest struct {
	ChatID string `json:"chatID" yaml:"chatID" jsonschema:"title=Chat ID,description=The unique identifier for the chat session."`
	// Input is the message sent by the user to the assistant.
	Input string `json:"input" yaml:"input" jsonschema:"title=Input,description=The message sent by the user to the assistant."`
}

func (o *MCPInputRequest) ParseInput(input string) error {
	err := json.Unmarshal(llmutils.CleanJSON([]byte(input)), o)
	if err != nil {
		return errors.Wrap(err, "failed to unmarshal input")
	}
	return nil
}

func (o MCPInputRequest) JSONSchemaExtend(schema *jsonschema.Schema) {
	schema.Title = "MCP Input Request"
	schema.Description = "The input request from the user to the AI agent."
}

// InputRequest represents the input from the user to the AI agent.
type InputRequest struct {
	// Input is the message sent by the user to the assistant.
	Input string `json:"input" yaml:"input" jsonschema:"title=Input,description=The message sent by the user to the assistant."`
}

func (o InputRequest) JSONSchemaExtend(schema *jsonschema.Schema) {
	schema.Title = "Input Request"
	schema.Description = "The input request from the user to the AI agent."
}

// GetContent gets the content of the message for the chat history
func (o InputRequest) GetContent() string {
	return o.Input
}

func (o *InputRequest) ParseInput(input string) error {
	err := json.Unmarshal(llmutils.CleanJSON([]byte(input)), o)
	if err != nil {
		return errors.Wrap(err, "failed to unmarshal input")
	}
	return nil
}

// NewInputRequest returns a new InputRequest
func NewInputRequest(chatMessage string) *InputRequest {
	return &InputRequest{
		Input: chatMessage,
	}
}

// OutputResult represents the response generated by the chat agent.
type OutputResult struct {
	// contains the markdown-enabled response generated by the chat agent.
	Content string `json:"content" yaml:"content" jsonschema:"title=Response Content,description=The content returned by agent or tool."`
}

// GetContent gets the content of the message for the chat history
func (o OutputResult) GetContent() string {
	return o.Content
}

// NewOutputResult returns a new OutputResult
func NewOutputResult(chatMessage string) *OutputResult {
	return &OutputResult{
		Content: chatMessage,
	}
}

type BaseClarificationResult struct {
	Confidence    string `json:"confidence,omitempty" yaml:"confidence" jsonschema:"title=Confidence Level,description=The confidence level of the response,enum=Low,enum=Medium,enum=High"`
	Clarification string `json:"clarification,omitempty" yaml:"clarification" jsonschema:"title=Clarification,description=Clarification is returned when the agent is not sure about the answer and needs to ask for more information."`
	Reasoning     string `json:"reasoning,omitempty" yaml:"reasoning" jsonschema:"title=Reasoning,description=Optional reasoning for the response choice."`
}

type IBaseResult interface {
	SetConfidence(string)
	SetClarification(string)
	SetReasoning(string)
}

func (b *BaseClarificationResult) SetConfidence(confidence string) {
	b.Confidence = confidence
}

func (b *BaseClarificationResult) SetClarification(clarification string) {
	b.Clarification = clarification
}

func (b *BaseClarificationResult) SetReasoning(reasoning string) {
	b.Reasoning = reasoning
}

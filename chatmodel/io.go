package chatmodel

type ContentProvider interface {
	// GetContent gets the content of the message for the chat history
	GetContent() string
}

// MCPInputRequest represents the MCP input from the user to the AI agent.
type MCPInputRequest struct {
	ChatID string `json:"ChatID" yaml:"ChatID" jsonschema:"title=Chat ID,description=The unique identifier for the chat session."`
	// Input is the message sent by the user to the assistant.
	Input string `json:"Input" yaml:"Input" jsonschema:"title=Input,description=The message sent by the user to the assistant."`
}

// InputRequest represents the input from the user to the AI agent.
type InputRequest struct {
	// Input is the message sent by the user to the assistant.
	Input string `json:"Input" yaml:"Input" jsonschema:"title=Input,description=The message sent by the user to the assistant."`
}

// NewInputRequest returns a new InputRequest
func NewInputRequest(chatMessage string) *InputRequest {
	return &InputRequest{
		Input: chatMessage,
	}
}

// OutputResult represents the response generated by the chat agent.
type OutputResult struct {
	// contains the markdown-enabled response generated by the chat agent.
	Content string `json:"Content" yaml:"Content" jsonschema:"title=Response Content,description=The content returned by agent or tool."`
}

// GetContent gets the content of the message for the chat history
func (o OutputResult) GetContent() string {
	return o.Content
}

// NewOutputResult returns a new OutputResult
func NewOutputResult(chatMessage string) *OutputResult {
	return &OutputResult{
		Content: chatMessage,
	}
}

type BaseClarificationResult struct {
	Confidence    string `json:"Confidence,omitempty" yaml:"Confidence" jsonschema:"title=Confidence Level,description=The confidence level of the response,enum=Low,enum=Medium,enum=High"`
	Clarification string `json:"Clarification,omitempty" yaml:"Clarification" jsonschema:"title=Clarification,description=Clarification is returned when the agent is not sure about the answer and needs to ask for more information."`
	Reasoning     string `json:"Reasoning,omitempty" yaml:"Reasoning" jsonschema:"title=Reasoning,description=Optional reasoning for the response choice."`
}

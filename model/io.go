package model

type ContentProvider interface {
	// GetContent gets the content of the message for the chat history
	GetContent() string
}

// Input represents the input from the user to the AI agent.
type Input struct {
	// Content is the chat message sent by the user to the assistant.
	Content string `json:"Content" yaml:"Content" jsonschema:"title=Content,description=The chat message sent by the user to the assistant."`
}

// NewInput returns a new BaseAgentInput
func NewInput(chatMessage string) *Input {
	return &Input{
		Content: chatMessage,
	}
}

// Output implements BaseAgentOutputSchema
// This schema represents the response generated by the chat agent.
type Output struct {
	// contains the markdown-enabled response generated by the chat agent.
	Content string `json:"Content" yaml:"Content" jsonschema:"title=Content,description=The chat message exchanged between the user and the chat agent.This contains the markdown-enabled response generated by the chat agent."`
}

// GetContent gets the content of the message for the chat history
func (o Output) GetContent() string {
	return o.Content
}

// NewOutput returns a new BaseAgentOutput
func NewOutput(chatMessage string) *Output {
	return &Output{
		Content: chatMessage,
	}
}

type BaseClarificationResult struct {
	Confidence    string `json:"Confidence,omitempty" yaml:"Confidence" jsonschema:"title=Confidence,description=The confidence level of the response,enum=Low,enum=Medium,enum=High"`
	Clarification string `json:"Clarification,omitempty" yaml:"Clarification" jsonschema:"title=Clarification,description=Clarification is returned when the agent is not sure about the answer and needs to ask for more information."`
	Reasoning     string `json:"Reasoning,omitempty" yaml:"Reasoning" jsonschema:"title=Reasoning,description=Optional reasoning for the response choice."`
}

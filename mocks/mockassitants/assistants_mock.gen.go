// Code generated by MockGen. DO NOT EDIT.
// Source: assistants.go
//
// Generated by this command:
//
//	mockgen -source=assistants.go -destination=../mocks/mockassitants/assistants_mock.gen.go -package mockassitants
//

// Package mockassitants is a generated GoMock package.
package mockassitants

import (
	context "context"
	reflect "reflect"

	assistants "github.com/effective-security/gogentic/assistants"
	chatmodel "github.com/effective-security/gogentic/chatmodel"
	tools "github.com/effective-security/gogentic/tools"
	mcp_golang "github.com/metoro-io/mcp-golang"
	llms "github.com/tmc/langchaingo/llms"
	gomock "go.uber.org/mock/gomock"
)

// MockMcpServerRegistrator is a mock of McpServerRegistrator interface.
type MockMcpServerRegistrator struct {
	ctrl     *gomock.Controller
	recorder *MockMcpServerRegistratorMockRecorder
	isgomock struct{}
}

// MockMcpServerRegistratorMockRecorder is the mock recorder for MockMcpServerRegistrator.
type MockMcpServerRegistratorMockRecorder struct {
	mock *MockMcpServerRegistrator
}

// NewMockMcpServerRegistrator creates a new mock instance.
func NewMockMcpServerRegistrator(ctrl *gomock.Controller) *MockMcpServerRegistrator {
	mock := &MockMcpServerRegistrator{ctrl: ctrl}
	mock.recorder = &MockMcpServerRegistratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMcpServerRegistrator) EXPECT() *MockMcpServerRegistratorMockRecorder {
	return m.recorder
}

// RegisterPrompt mocks base method.
func (m *MockMcpServerRegistrator) RegisterPrompt(name, description string, handler any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPrompt", name, description, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterPrompt indicates an expected call of RegisterPrompt.
func (mr *MockMcpServerRegistratorMockRecorder) RegisterPrompt(name, description, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPrompt", reflect.TypeOf((*MockMcpServerRegistrator)(nil).RegisterPrompt), name, description, handler)
}

// MockIAssistant is a mock of IAssistant interface.
type MockIAssistant struct {
	ctrl     *gomock.Controller
	recorder *MockIAssistantMockRecorder
	isgomock struct{}
}

// MockIAssistantMockRecorder is the mock recorder for MockIAssistant.
type MockIAssistantMockRecorder struct {
	mock *MockIAssistant
}

// NewMockIAssistant creates a new mock instance.
func NewMockIAssistant(ctrl *gomock.Controller) *MockIAssistant {
	mock := &MockIAssistant{ctrl: ctrl}
	mock.recorder = &MockIAssistantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAssistant) EXPECT() *MockIAssistantMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockIAssistant) Call(ctx context.Context, input string, promptInputs map[string]any, options ...assistants.Option) (*llms.ContentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input, promptInputs}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(*llms.ContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockIAssistantMockRecorder) Call(ctx, input, promptInputs any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input, promptInputs}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockIAssistant)(nil).Call), varargs...)
}

// Description mocks base method.
func (m *MockIAssistant) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockIAssistantMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockIAssistant)(nil).Description))
}

// FormatPrompt mocks base method.
func (m *MockIAssistant) FormatPrompt(values map[string]any) (llms.PromptValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatPrompt", values)
	ret0, _ := ret[0].(llms.PromptValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatPrompt indicates an expected call of FormatPrompt.
func (mr *MockIAssistantMockRecorder) FormatPrompt(values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatPrompt", reflect.TypeOf((*MockIAssistant)(nil).FormatPrompt), values)
}

// GetPromptInputVariables mocks base method.
func (m *MockIAssistant) GetPromptInputVariables() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromptInputVariables")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPromptInputVariables indicates an expected call of GetPromptInputVariables.
func (mr *MockIAssistantMockRecorder) GetPromptInputVariables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromptInputVariables", reflect.TypeOf((*MockIAssistant)(nil).GetPromptInputVariables))
}

// GetTools mocks base method.
func (m *MockIAssistant) GetTools() []tools.ITool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTools")
	ret0, _ := ret[0].([]tools.ITool)
	return ret0
}

// GetTools indicates an expected call of GetTools.
func (mr *MockIAssistantMockRecorder) GetTools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTools", reflect.TypeOf((*MockIAssistant)(nil).GetTools))
}

// Name mocks base method.
func (m *MockIAssistant) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIAssistantMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIAssistant)(nil).Name))
}

// MockIAssistantTool is a mock of IAssistantTool interface.
type MockIAssistantTool struct {
	ctrl     *gomock.Controller
	recorder *MockIAssistantToolMockRecorder
	isgomock struct{}
}

// MockIAssistantToolMockRecorder is the mock recorder for MockIAssistantTool.
type MockIAssistantToolMockRecorder struct {
	mock *MockIAssistantTool
}

// NewMockIAssistantTool creates a new mock instance.
func NewMockIAssistantTool(ctrl *gomock.Controller) *MockIAssistantTool {
	mock := &MockIAssistantTool{ctrl: ctrl}
	mock.recorder = &MockIAssistantToolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAssistantTool) EXPECT() *MockIAssistantToolMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockIAssistantTool) Call(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockIAssistantToolMockRecorder) Call(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockIAssistantTool)(nil).Call), arg0, arg1)
}

// CallAssistant mocks base method.
func (m *MockIAssistantTool) CallAssistant(ctx context.Context, input string, options ...assistants.Option) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CallAssistant", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallAssistant indicates an expected call of CallAssistant.
func (mr *MockIAssistantToolMockRecorder) CallAssistant(ctx, input any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallAssistant", reflect.TypeOf((*MockIAssistantTool)(nil).CallAssistant), varargs...)
}

// Description mocks base method.
func (m *MockIAssistantTool) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockIAssistantToolMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockIAssistantTool)(nil).Description))
}

// Name mocks base method.
func (m *MockIAssistantTool) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIAssistantToolMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIAssistantTool)(nil).Name))
}

// Parameters mocks base method.
func (m *MockIAssistantTool) Parameters() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parameters")
	ret0, _ := ret[0].(any)
	return ret0
}

// Parameters indicates an expected call of Parameters.
func (mr *MockIAssistantToolMockRecorder) Parameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parameters", reflect.TypeOf((*MockIAssistantTool)(nil).Parameters))
}

// MockHasCallback is a mock of HasCallback interface.
type MockHasCallback struct {
	ctrl     *gomock.Controller
	recorder *MockHasCallbackMockRecorder
	isgomock struct{}
}

// MockHasCallbackMockRecorder is the mock recorder for MockHasCallback.
type MockHasCallbackMockRecorder struct {
	mock *MockHasCallback
}

// NewMockHasCallback creates a new mock instance.
func NewMockHasCallback(ctrl *gomock.Controller) *MockHasCallback {
	mock := &MockHasCallback{ctrl: ctrl}
	mock.recorder = &MockHasCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHasCallback) EXPECT() *MockHasCallbackMockRecorder {
	return m.recorder
}

// GetCallback mocks base method.
func (m *MockHasCallback) GetCallback() assistants.Callback {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCallback")
	ret0, _ := ret[0].(assistants.Callback)
	return ret0
}

// GetCallback indicates an expected call of GetCallback.
func (mr *MockHasCallbackMockRecorder) GetCallback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallback", reflect.TypeOf((*MockHasCallback)(nil).GetCallback))
}

// MockTypeableAssistant is a mock of TypeableAssistant interface.
type MockTypeableAssistant[O chatmodel.ContentProvider] struct {
	ctrl     *gomock.Controller
	recorder *MockTypeableAssistantMockRecorder[O]
	isgomock struct{}
}

// MockTypeableAssistantMockRecorder is the mock recorder for MockTypeableAssistant.
type MockTypeableAssistantMockRecorder[O chatmodel.ContentProvider] struct {
	mock *MockTypeableAssistant[O]
}

// NewMockTypeableAssistant creates a new mock instance.
func NewMockTypeableAssistant[O chatmodel.ContentProvider](ctrl *gomock.Controller) *MockTypeableAssistant[O] {
	mock := &MockTypeableAssistant[O]{ctrl: ctrl}
	mock.recorder = &MockTypeableAssistantMockRecorder[O]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypeableAssistant[O]) EXPECT() *MockTypeableAssistantMockRecorder[O] {
	return m.recorder
}

// Call mocks base method.
func (m *MockTypeableAssistant[O]) Call(ctx context.Context, input string, promptInputs map[string]any, options ...assistants.Option) (*llms.ContentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input, promptInputs}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(*llms.ContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockTypeableAssistantMockRecorder[O]) Call(ctx, input, promptInputs any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input, promptInputs}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockTypeableAssistant[O])(nil).Call), varargs...)
}

// Description mocks base method.
func (m *MockTypeableAssistant[O]) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockTypeableAssistantMockRecorder[O]) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockTypeableAssistant[O])(nil).Description))
}

// FormatPrompt mocks base method.
func (m *MockTypeableAssistant[O]) FormatPrompt(values map[string]any) (llms.PromptValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatPrompt", values)
	ret0, _ := ret[0].(llms.PromptValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatPrompt indicates an expected call of FormatPrompt.
func (mr *MockTypeableAssistantMockRecorder[O]) FormatPrompt(values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatPrompt", reflect.TypeOf((*MockTypeableAssistant[O])(nil).FormatPrompt), values)
}

// GetCallback mocks base method.
func (m *MockTypeableAssistant[O]) GetCallback() assistants.Callback {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCallback")
	ret0, _ := ret[0].(assistants.Callback)
	return ret0
}

// GetCallback indicates an expected call of GetCallback.
func (mr *MockTypeableAssistantMockRecorder[O]) GetCallback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallback", reflect.TypeOf((*MockTypeableAssistant[O])(nil).GetCallback))
}

// GetPromptInputVariables mocks base method.
func (m *MockTypeableAssistant[O]) GetPromptInputVariables() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromptInputVariables")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPromptInputVariables indicates an expected call of GetPromptInputVariables.
func (mr *MockTypeableAssistantMockRecorder[O]) GetPromptInputVariables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromptInputVariables", reflect.TypeOf((*MockTypeableAssistant[O])(nil).GetPromptInputVariables))
}

// GetTools mocks base method.
func (m *MockTypeableAssistant[O]) GetTools() []tools.ITool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTools")
	ret0, _ := ret[0].([]tools.ITool)
	return ret0
}

// GetTools indicates an expected call of GetTools.
func (mr *MockTypeableAssistantMockRecorder[O]) GetTools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTools", reflect.TypeOf((*MockTypeableAssistant[O])(nil).GetTools))
}

// Name mocks base method.
func (m *MockTypeableAssistant[O]) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockTypeableAssistantMockRecorder[O]) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTypeableAssistant[O])(nil).Name))
}

// Run mocks base method.
func (m *MockTypeableAssistant[O]) Run(ctx context.Context, input string, promptInputs map[string]any, optionalOutputType *O, options ...assistants.Option) (*llms.ContentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input, promptInputs, optionalOutputType}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(*llms.ContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockTypeableAssistantMockRecorder[O]) Run(ctx, input, promptInputs, optionalOutputType any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input, promptInputs, optionalOutputType}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockTypeableAssistant[O])(nil).Run), varargs...)
}

// MockCallback is a mock of Callback interface.
type MockCallback struct {
	ctrl     *gomock.Controller
	recorder *MockCallbackMockRecorder
	isgomock struct{}
}

// MockCallbackMockRecorder is the mock recorder for MockCallback.
type MockCallbackMockRecorder struct {
	mock *MockCallback
}

// NewMockCallback creates a new mock instance.
func NewMockCallback(ctrl *gomock.Controller) *MockCallback {
	mock := &MockCallback{ctrl: ctrl}
	mock.recorder = &MockCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallback) EXPECT() *MockCallbackMockRecorder {
	return m.recorder
}

// OnAssistantEnd mocks base method.
func (m *MockCallback) OnAssistantEnd(ctx context.Context, a assistants.IAssistant, input string, resp *llms.ContentResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnAssistantEnd", ctx, a, input, resp)
}

// OnAssistantEnd indicates an expected call of OnAssistantEnd.
func (mr *MockCallbackMockRecorder) OnAssistantEnd(ctx, a, input, resp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAssistantEnd", reflect.TypeOf((*MockCallback)(nil).OnAssistantEnd), ctx, a, input, resp)
}

// OnAssistantError mocks base method.
func (m *MockCallback) OnAssistantError(ctx context.Context, a assistants.IAssistant, input string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnAssistantError", ctx, a, input, err)
}

// OnAssistantError indicates an expected call of OnAssistantError.
func (mr *MockCallbackMockRecorder) OnAssistantError(ctx, a, input, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAssistantError", reflect.TypeOf((*MockCallback)(nil).OnAssistantError), ctx, a, input, err)
}

// OnAssistantLLMCall mocks base method.
func (m *MockCallback) OnAssistantLLMCall(ctx context.Context, a assistants.IAssistant, payload []llms.MessageContent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnAssistantLLMCall", ctx, a, payload)
}

// OnAssistantLLMCall indicates an expected call of OnAssistantLLMCall.
func (mr *MockCallbackMockRecorder) OnAssistantLLMCall(ctx, a, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAssistantLLMCall", reflect.TypeOf((*MockCallback)(nil).OnAssistantLLMCall), ctx, a, payload)
}

// OnAssistantLLMParseError mocks base method.
func (m *MockCallback) OnAssistantLLMParseError(ctx context.Context, a assistants.IAssistant, input, response string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnAssistantLLMParseError", ctx, a, input, response, err)
}

// OnAssistantLLMParseError indicates an expected call of OnAssistantLLMParseError.
func (mr *MockCallbackMockRecorder) OnAssistantLLMParseError(ctx, a, input, response, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAssistantLLMParseError", reflect.TypeOf((*MockCallback)(nil).OnAssistantLLMParseError), ctx, a, input, response, err)
}

// OnAssistantStart mocks base method.
func (m *MockCallback) OnAssistantStart(ctx context.Context, a assistants.IAssistant, input string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnAssistantStart", ctx, a, input)
}

// OnAssistantStart indicates an expected call of OnAssistantStart.
func (mr *MockCallbackMockRecorder) OnAssistantStart(ctx, a, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAssistantStart", reflect.TypeOf((*MockCallback)(nil).OnAssistantStart), ctx, a, input)
}

// OnToolEnd mocks base method.
func (m *MockCallback) OnToolEnd(arg0 context.Context, arg1 tools.ITool, arg2, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnToolEnd", arg0, arg1, arg2, arg3)
}

// OnToolEnd indicates an expected call of OnToolEnd.
func (mr *MockCallbackMockRecorder) OnToolEnd(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnToolEnd", reflect.TypeOf((*MockCallback)(nil).OnToolEnd), arg0, arg1, arg2, arg3)
}

// OnToolError mocks base method.
func (m *MockCallback) OnToolError(arg0 context.Context, arg1 tools.ITool, arg2 string, arg3 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnToolError", arg0, arg1, arg2, arg3)
}

// OnToolError indicates an expected call of OnToolError.
func (mr *MockCallbackMockRecorder) OnToolError(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnToolError", reflect.TypeOf((*MockCallback)(nil).OnToolError), arg0, arg1, arg2, arg3)
}

// OnToolNotFound mocks base method.
func (m *MockCallback) OnToolNotFound(ctx context.Context, a assistants.IAssistant, tool string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnToolNotFound", ctx, a, tool)
}

// OnToolNotFound indicates an expected call of OnToolNotFound.
func (mr *MockCallbackMockRecorder) OnToolNotFound(ctx, a, tool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnToolNotFound", reflect.TypeOf((*MockCallback)(nil).OnToolNotFound), ctx, a, tool)
}

// OnToolStart mocks base method.
func (m *MockCallback) OnToolStart(arg0 context.Context, arg1 tools.ITool, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnToolStart", arg0, arg1, arg2)
}

// OnToolStart indicates an expected call of OnToolStart.
func (mr *MockCallbackMockRecorder) OnToolStart(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnToolStart", reflect.TypeOf((*MockCallback)(nil).OnToolStart), arg0, arg1, arg2)
}

// MockIMCPAssistant is a mock of IMCPAssistant interface.
type MockIMCPAssistant struct {
	ctrl     *gomock.Controller
	recorder *MockIMCPAssistantMockRecorder
	isgomock struct{}
}

// MockIMCPAssistantMockRecorder is the mock recorder for MockIMCPAssistant.
type MockIMCPAssistantMockRecorder struct {
	mock *MockIMCPAssistant
}

// NewMockIMCPAssistant creates a new mock instance.
func NewMockIMCPAssistant(ctrl *gomock.Controller) *MockIMCPAssistant {
	mock := &MockIMCPAssistant{ctrl: ctrl}
	mock.recorder = &MockIMCPAssistantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMCPAssistant) EXPECT() *MockIMCPAssistantMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockIMCPAssistant) Call(ctx context.Context, input string, promptInputs map[string]any, options ...assistants.Option) (*llms.ContentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input, promptInputs}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(*llms.ContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockIMCPAssistantMockRecorder) Call(ctx, input, promptInputs any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input, promptInputs}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockIMCPAssistant)(nil).Call), varargs...)
}

// CallMCP mocks base method.
func (m *MockIMCPAssistant) CallMCP(arg0 context.Context, arg1 chatmodel.MCPInputRequest) (*mcp_golang.PromptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallMCP", arg0, arg1)
	ret0, _ := ret[0].(*mcp_golang.PromptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallMCP indicates an expected call of CallMCP.
func (mr *MockIMCPAssistantMockRecorder) CallMCP(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallMCP", reflect.TypeOf((*MockIMCPAssistant)(nil).CallMCP), arg0, arg1)
}

// Description mocks base method.
func (m *MockIMCPAssistant) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockIMCPAssistantMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockIMCPAssistant)(nil).Description))
}

// FormatPrompt mocks base method.
func (m *MockIMCPAssistant) FormatPrompt(values map[string]any) (llms.PromptValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatPrompt", values)
	ret0, _ := ret[0].(llms.PromptValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatPrompt indicates an expected call of FormatPrompt.
func (mr *MockIMCPAssistantMockRecorder) FormatPrompt(values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatPrompt", reflect.TypeOf((*MockIMCPAssistant)(nil).FormatPrompt), values)
}

// GetPromptInputVariables mocks base method.
func (m *MockIMCPAssistant) GetPromptInputVariables() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromptInputVariables")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPromptInputVariables indicates an expected call of GetPromptInputVariables.
func (mr *MockIMCPAssistantMockRecorder) GetPromptInputVariables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromptInputVariables", reflect.TypeOf((*MockIMCPAssistant)(nil).GetPromptInputVariables))
}

// GetTools mocks base method.
func (m *MockIMCPAssistant) GetTools() []tools.ITool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTools")
	ret0, _ := ret[0].([]tools.ITool)
	return ret0
}

// GetTools indicates an expected call of GetTools.
func (mr *MockIMCPAssistantMockRecorder) GetTools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTools", reflect.TypeOf((*MockIMCPAssistant)(nil).GetTools))
}

// Name mocks base method.
func (m *MockIMCPAssistant) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIMCPAssistantMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIMCPAssistant)(nil).Name))
}

// RegisterMCP mocks base method.
func (m *MockIMCPAssistant) RegisterMCP(registrator assistants.McpServerRegistrator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMCP", registrator)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterMCP indicates an expected call of RegisterMCP.
func (mr *MockIMCPAssistantMockRecorder) RegisterMCP(registrator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMCP", reflect.TypeOf((*MockIMCPAssistant)(nil).RegisterMCP), registrator)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: assistants.go
//
// Generated by this command:
//
//	mockgen -source=assistants.go -destination=../mocks/mockassitants/assistants_mock.gen.go -package mockassitants
//

// Package mockassitants is a generated GoMock package.
package mockassitants

import (
	context "context"
	reflect "reflect"

	assistants "github.com/effective-security/gogentic/assistants"
	chatmodel "github.com/effective-security/gogentic/chatmodel"
	tools "github.com/effective-security/gogentic/tools"
	llms "github.com/tmc/langchaingo/llms"
	gomock "go.uber.org/mock/gomock"
)

// MockIAssistant is a mock of IAssistant interface.
type MockIAssistant struct {
	ctrl     *gomock.Controller
	recorder *MockIAssistantMockRecorder
	isgomock struct{}
}

// MockIAssistantMockRecorder is the mock recorder for MockIAssistant.
type MockIAssistantMockRecorder struct {
	mock *MockIAssistant
}

// NewMockIAssistant creates a new mock instance.
func NewMockIAssistant(ctrl *gomock.Controller) *MockIAssistant {
	mock := &MockIAssistant{ctrl: ctrl}
	mock.recorder = &MockIAssistantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAssistant) EXPECT() *MockIAssistantMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockIAssistant) Call(ctx context.Context, input string, promptInputs map[string]any) (*llms.ContentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, input, promptInputs)
	ret0, _ := ret[0].(*llms.ContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockIAssistantMockRecorder) Call(ctx, input, promptInputs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockIAssistant)(nil).Call), ctx, input, promptInputs)
}

// Description mocks base method.
func (m *MockIAssistant) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockIAssistantMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockIAssistant)(nil).Description))
}

// FormatPrompt mocks base method.
func (m *MockIAssistant) FormatPrompt(values map[string]any) (llms.PromptValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatPrompt", values)
	ret0, _ := ret[0].(llms.PromptValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatPrompt indicates an expected call of FormatPrompt.
func (mr *MockIAssistantMockRecorder) FormatPrompt(values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatPrompt", reflect.TypeOf((*MockIAssistant)(nil).FormatPrompt), values)
}

// GetPromptInputVariables mocks base method.
func (m *MockIAssistant) GetPromptInputVariables() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromptInputVariables")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPromptInputVariables indicates an expected call of GetPromptInputVariables.
func (mr *MockIAssistantMockRecorder) GetPromptInputVariables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromptInputVariables", reflect.TypeOf((*MockIAssistant)(nil).GetPromptInputVariables))
}

// Name mocks base method.
func (m *MockIAssistant) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIAssistantMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIAssistant)(nil).Name))
}

// MockHasCallback is a mock of HasCallback interface.
type MockHasCallback struct {
	ctrl     *gomock.Controller
	recorder *MockHasCallbackMockRecorder
	isgomock struct{}
}

// MockHasCallbackMockRecorder is the mock recorder for MockHasCallback.
type MockHasCallbackMockRecorder struct {
	mock *MockHasCallback
}

// NewMockHasCallback creates a new mock instance.
func NewMockHasCallback(ctrl *gomock.Controller) *MockHasCallback {
	mock := &MockHasCallback{ctrl: ctrl}
	mock.recorder = &MockHasCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHasCallback) EXPECT() *MockHasCallbackMockRecorder {
	return m.recorder
}

// GetCallback mocks base method.
func (m *MockHasCallback) GetCallback() assistants.Callback {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCallback")
	ret0, _ := ret[0].(assistants.Callback)
	return ret0
}

// GetCallback indicates an expected call of GetCallback.
func (mr *MockHasCallbackMockRecorder) GetCallback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallback", reflect.TypeOf((*MockHasCallback)(nil).GetCallback))
}

// MockTypeableAssistant is a mock of TypeableAssistant interface.
type MockTypeableAssistant[O chatmodel.ContentProvider] struct {
	ctrl     *gomock.Controller
	recorder *MockTypeableAssistantMockRecorder[O]
	isgomock struct{}
}

// MockTypeableAssistantMockRecorder is the mock recorder for MockTypeableAssistant.
type MockTypeableAssistantMockRecorder[O chatmodel.ContentProvider] struct {
	mock *MockTypeableAssistant[O]
}

// NewMockTypeableAssistant creates a new mock instance.
func NewMockTypeableAssistant[O chatmodel.ContentProvider](ctrl *gomock.Controller) *MockTypeableAssistant[O] {
	mock := &MockTypeableAssistant[O]{ctrl: ctrl}
	mock.recorder = &MockTypeableAssistantMockRecorder[O]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypeableAssistant[O]) EXPECT() *MockTypeableAssistantMockRecorder[O] {
	return m.recorder
}

// Call mocks base method.
func (m *MockTypeableAssistant[O]) Call(ctx context.Context, input string, promptInputs map[string]any) (*llms.ContentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, input, promptInputs)
	ret0, _ := ret[0].(*llms.ContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockTypeableAssistantMockRecorder[O]) Call(ctx, input, promptInputs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockTypeableAssistant[O])(nil).Call), ctx, input, promptInputs)
}

// Description mocks base method.
func (m *MockTypeableAssistant[O]) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockTypeableAssistantMockRecorder[O]) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockTypeableAssistant[O])(nil).Description))
}

// FormatPrompt mocks base method.
func (m *MockTypeableAssistant[O]) FormatPrompt(values map[string]any) (llms.PromptValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatPrompt", values)
	ret0, _ := ret[0].(llms.PromptValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatPrompt indicates an expected call of FormatPrompt.
func (mr *MockTypeableAssistantMockRecorder[O]) FormatPrompt(values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatPrompt", reflect.TypeOf((*MockTypeableAssistant[O])(nil).FormatPrompt), values)
}

// GetCallback mocks base method.
func (m *MockTypeableAssistant[O]) GetCallback() assistants.Callback {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCallback")
	ret0, _ := ret[0].(assistants.Callback)
	return ret0
}

// GetCallback indicates an expected call of GetCallback.
func (mr *MockTypeableAssistantMockRecorder[O]) GetCallback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallback", reflect.TypeOf((*MockTypeableAssistant[O])(nil).GetCallback))
}

// GetPromptInputVariables mocks base method.
func (m *MockTypeableAssistant[O]) GetPromptInputVariables() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromptInputVariables")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPromptInputVariables indicates an expected call of GetPromptInputVariables.
func (mr *MockTypeableAssistantMockRecorder[O]) GetPromptInputVariables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromptInputVariables", reflect.TypeOf((*MockTypeableAssistant[O])(nil).GetPromptInputVariables))
}

// Name mocks base method.
func (m *MockTypeableAssistant[O]) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockTypeableAssistantMockRecorder[O]) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTypeableAssistant[O])(nil).Name))
}

// Run mocks base method.
func (m *MockTypeableAssistant[O]) Run(ctx context.Context, input string, promptInputs map[string]any, optionalOutputType *O) (*llms.ContentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, input, promptInputs, optionalOutputType)
	ret0, _ := ret[0].(*llms.ContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockTypeableAssistantMockRecorder[O]) Run(ctx, input, promptInputs, optionalOutputType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockTypeableAssistant[O])(nil).Run), ctx, input, promptInputs, optionalOutputType)
}

// MockCallback is a mock of Callback interface.
type MockCallback struct {
	ctrl     *gomock.Controller
	recorder *MockCallbackMockRecorder
	isgomock struct{}
}

// MockCallbackMockRecorder is the mock recorder for MockCallback.
type MockCallbackMockRecorder struct {
	mock *MockCallback
}

// NewMockCallback creates a new mock instance.
func NewMockCallback(ctrl *gomock.Controller) *MockCallback {
	mock := &MockCallback{ctrl: ctrl}
	mock.recorder = &MockCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallback) EXPECT() *MockCallbackMockRecorder {
	return m.recorder
}

// OnAssistantEnd mocks base method.
func (m *MockCallback) OnAssistantEnd(ctx context.Context, agent assistants.IAssistant, input string, resp *llms.ContentResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnAssistantEnd", ctx, agent, input, resp)
}

// OnAssistantEnd indicates an expected call of OnAssistantEnd.
func (mr *MockCallbackMockRecorder) OnAssistantEnd(ctx, agent, input, resp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAssistantEnd", reflect.TypeOf((*MockCallback)(nil).OnAssistantEnd), ctx, agent, input, resp)
}

// OnAssistantError mocks base method.
func (m *MockCallback) OnAssistantError(cyx context.Context, agent assistants.IAssistant, input string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnAssistantError", cyx, agent, input, err)
}

// OnAssistantError indicates an expected call of OnAssistantError.
func (mr *MockCallbackMockRecorder) OnAssistantError(cyx, agent, input, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAssistantError", reflect.TypeOf((*MockCallback)(nil).OnAssistantError), cyx, agent, input, err)
}

// OnAssistantStart mocks base method.
func (m *MockCallback) OnAssistantStart(ctx context.Context, agent assistants.IAssistant, input string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnAssistantStart", ctx, agent, input)
}

// OnAssistantStart indicates an expected call of OnAssistantStart.
func (mr *MockCallbackMockRecorder) OnAssistantStart(ctx, agent, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAssistantStart", reflect.TypeOf((*MockCallback)(nil).OnAssistantStart), ctx, agent, input)
}

// OnToolEnd mocks base method.
func (m *MockCallback) OnToolEnd(arg0 context.Context, arg1 tools.ITool, arg2, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnToolEnd", arg0, arg1, arg2, arg3)
}

// OnToolEnd indicates an expected call of OnToolEnd.
func (mr *MockCallbackMockRecorder) OnToolEnd(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnToolEnd", reflect.TypeOf((*MockCallback)(nil).OnToolEnd), arg0, arg1, arg2, arg3)
}

// OnToolError mocks base method.
func (m *MockCallback) OnToolError(arg0 context.Context, arg1 tools.ITool, arg2 string, arg3 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnToolError", arg0, arg1, arg2, arg3)
}

// OnToolError indicates an expected call of OnToolError.
func (mr *MockCallbackMockRecorder) OnToolError(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnToolError", reflect.TypeOf((*MockCallback)(nil).OnToolError), arg0, arg1, arg2, arg3)
}

// OnToolStart mocks base method.
func (m *MockCallback) OnToolStart(arg0 context.Context, arg1 tools.ITool, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnToolStart", arg0, arg1, arg2)
}

// OnToolStart indicates an expected call of OnToolStart.
func (mr *MockCallbackMockRecorder) OnToolStart(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnToolStart", reflect.TypeOf((*MockCallback)(nil).OnToolStart), arg0, arg1, arg2)
}

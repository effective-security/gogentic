// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/effective-security/gogentic/pkg/llms (interfaces: Model)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mockllms/llm_mock.gen.go -package mockllms github.com/effective-security/gogentic/pkg/llms Model
//

// Package mockllms is a generated GoMock package.
package mockllms

import (
	context "context"
	reflect "reflect"

	llms "github.com/effective-security/gogentic/pkg/llms"
	gomock "go.uber.org/mock/gomock"
)

// MockModel is a mock of Model interface.
type MockModel struct {
	ctrl     *gomock.Controller
	recorder *MockModelMockRecorder
	isgomock struct{}
}

// MockModelMockRecorder is the mock recorder for MockModel.
type MockModelMockRecorder struct {
	mock *MockModel
}

// NewMockModel creates a new mock instance.
func NewMockModel(ctrl *gomock.Controller) *MockModel {
	mock := &MockModel{ctrl: ctrl}
	mock.recorder = &MockModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModel) EXPECT() *MockModelMockRecorder {
	return m.recorder
}

// GenerateContent mocks base method.
func (m *MockModel) GenerateContent(ctx context.Context, messages []llms.MessageContent, options ...llms.CallOption) (*llms.ContentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, messages}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateContent", varargs...)
	ret0, _ := ret[0].(*llms.ContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateContent indicates an expected call of GenerateContent.
func (mr *MockModelMockRecorder) GenerateContent(ctx, messages any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, messages}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateContent", reflect.TypeOf((*MockModel)(nil).GenerateContent), varargs...)
}

// GetProviderType mocks base method.
func (m *MockModel) GetProviderType() llms.ProviderType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderType")
	ret0, _ := ret[0].(llms.ProviderType)
	return ret0
}

// GetProviderType indicates an expected call of GetProviderType.
func (mr *MockModelMockRecorder) GetProviderType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderType", reflect.TypeOf((*MockModel)(nil).GetProviderType))
}
